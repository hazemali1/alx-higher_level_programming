>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)
>>> try:
...	bg.integer_validator("name", "John")
... except Exception as e:
...	print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] name must be an integer
>>> try:
...	bg.integer_validator("age", 0)
... except Exception as e:
...	print("[{}] {}".format(e.__class__.__name__, e))
...
[ValueError] age must be greater than 0
>>> try:
...	bg.integer_validator("distance", -4)
... except Exception as e:
...	print("[{}] {}".format(e.__class__.__name__, e))
...
[ValueError] distance must be greater than 0
>>> try:
...     bg.integer_validator("distance", 5)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...

>>> try:
...     bg.integer_validator("distance")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] integer_validator() missing 1 required positional argument: 'value'
>>> try:
...     bg.integer_validator("distance", 1, 4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] integer_validator() takes 3 positional arguments but 4 were given
>>> try:
...     bg.integer_validator("distance", (5,))
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] distance must be an integer
>>> try:
...     bg.integer_validator("distance", [5])
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] distance must be an integer
>>> try:
...     bg.integer_validator("distance", {2, 7})
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] distance must be an integer
>>> try:
...     bg.integer_validator("distance", None)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] distance must be an integer
>>> try:
...     bg.integer_validator("distance", True)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...

>>> try:
...     bg.integer_validator()
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] integer_validator() missing 2 required positional arguments: 'name' and 'value'
>>> try:
...	bg.area(5, 5)
... except Exception as e:
...	print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] area() takes 1 positional argument but 3 were given
>>> try:
...     bg.integer_validator("distance", "9")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] distance must be an integer
>>> try:
...	bg.area()
... except Exception as e:
...	print("[{}] {}".format(e.__class__.__name__, e))
[Exception] area() is not implemented
>>> try:
...     bg.area(5)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] area() takes 1 positional argument but 2 were given
>>> try:
...     bg.integer_validator("distance", 3.17)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] distance must be an integer
